#!/usr/bin/env python
# Some are persistingly maling me screenshots inside Microsoft Word documents
# and not wanting to install a office suite but still wanting to see the 
# attached pictures I turned to foremost. but using it from mutt was done in
# quite a few steps. So I hacked together this beauty.
#
# It depends on the floping gnome stack to get thumbnails. But Hey! it's free.
#
# I'm using this in my ~/.mailcap 
# application/msword ; foremost-ui %s
#
# Oh by the way do whatever you please with the code.

import sys,os,subprocess,shutil
from gtk import *
from gobject import TYPE_STRING,TYPE_BOOLEAN

# Gets/Creates a thumbnail of path following the freedesktop spec
# Implemented using gnomevfs and gnomeui
def fd_thumbnail(path):
	import gnomevfs
	import gnome.ui

	factory = gnome.ui.ThumbnailFactory(gnome.ui.THUMBNAIL_SIZE_NORMAL)

	# Query gnomevfs for some info about the file
	uri=gnomevfs.get_uri_from_local_path(path)
	mime=gnomevfs.get_mime_type(path)
	mtime = int(os.path.getmtime(path))

	# Check if a thumbnail already exists
	thumb_path = factory.lookup(uri, mtime)
	if thumb_path:
		return gdk.pixbuf_new_from_file(thumb_path)
	else:
		# Try to create a thumbnail
		if not factory.can_thumbnail(uri, mime, mtime):
			return None
		thumb = factory.generate_thumbnail(uri, mime)
		if thumb != None:
			factory.save_thumbnail(thumb, uri, mtime)
		return thumb

class ReportWindow(Window):
	def __init__(self):
		Window.__init__(self)
		vbox = VBox()
		self.add(vbox)
		info = Label('oh hai')
		vbox.pack_start(info, expand=False)

		# A tree store with [pixbuf/name/full path/directory?]
		self.list = TreeStore(gdk.Pixbuf, TYPE_STRING, TYPE_STRING, TYPE_BOOLEAN)
		self.view = TreeView(self.list)
		vbox.pack_start(self.view)

		col = TreeViewColumn()

		cell_pixbuf = CellRendererPixbuf()
		col.pack_start(cell_pixbuf)
		col.add_attribute(cell_pixbuf, 'pixbuf', 0)

		cell_text = CellRendererText()
		col.pack_start(cell_text)
		col.add_attribute(cell_text, 'text', 1)

		self.view.append_column(col)

		self.view.connect('row_activated', self.row_activated_cb)

	def row_activated_cb(self, view, path, column):
		# When activated try to launch the file using xdg-open
		iter = self.list.get_iter(path)
		pixbuf, file, real_path, is_dir = self.list.get(iter, 0, 1, 2, 3)
		if is_dir:
			if self.view.row_expanded(path):
				self.view.collapse_row(path)
			else:
				self.view.expand_row(path, False)
		else:
			subprocess.call(['xdg-open', real_path])

	def scan_dir(self, dir):
		""" walk through dir adding all folders/files to the tree """
		plen = len(dir) + 1
		for root,dirs,files in os.walk(dir):
			dir = root[plen:]
			# use mime icon?
			parent = self.list.append(None, [None, dir, root, True]) if dir else None
			for f in files:
				full_path = os.path.join(root, f)
				pixbuf = fd_thumbnail(full_path)
				self.list.append(parent, [pixbuf, f, full_path, False])

# Consider putting this in a idle-callback to get a quicker startup.
file = sys.argv[1]
if file.startswith('/tmp'):
	outdir = '%s-output' % file
else:
	name = os.path.basename(file)
	outdir = '/tmp/%s-output' % name

if os.path.exists(outdir):
	stale = True
else:
	rcode = subprocess.call(['foremost', '-i', file, '-o', outdir])
	stale = False

# Foremost has done its thing, display a sweet list of items found
window = ReportWindow()
window.show_all()
window.connect('destroy', main_quit)

window.scan_dir(outdir)
window.view.expand_all()

main()

shutil.rmtree(outdir)
